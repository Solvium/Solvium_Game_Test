// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id          Int        @id @default(autoincrement())
  name        String
  points      Int
  link        String?
  isCompleted Boolean    @default(false)
  UserTasks   UserTask[]
}

model User {
  id             Int           @id @default(autoincrement())
  username       String        @unique
  name           String?
  wallet         String?       @unique
  email          String?       @unique
  referredBy     String
  chain          String?
  level          Int           @default(1)
  difficulty     Int           @default(1)
  puzzleCount    Int           @default(1)
  referralCount  Int           @default(0)
  chatId         String?
  spinCount      Int           @default(0)
  dailySpinCount Int           @default(0)
  claimCount     Int           @default(0)
  lastSpinClaim  DateTime      @default(now())
  totalPoints    Int           @default(0)
  isOfficial     Boolean       @default(false)
  isMining       Boolean       @default(false)
  isPremium      Boolean       @default(false)
  lastClaim      DateTime      @default(now())
  UserTasks      UserTask[]
  weeklyPoints   Int           @default(0)
  WeeklyScores   WeeklyScore[]
  wallets        Wallet[] // Relation to the new Wallet model
  linkedAccounts LoginMethod[] // Relation to the new LoginMethod model
}

// New model for wallets
model Wallet {
  id      Int    @id @default(autoincrement())
  chain   String
  address String
  userId  Int
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, chain])
}

// New model for linked accounts
model LoginMethod {
  id     Int    @id @default(autoincrement())
  type   String // e.g., "email", "wallet", "telegram"
  value  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  @@unique([type, value])
}

model WeeklyScore {
  id         Int      @id @default(autoincrement())
  userId     Int
  weekNumber Int // ISO week number
  year       Int // Year for clarity
  points     Int      @default(0) // Points scored by the user in the week
  rank       Int? // Rank of the user for the week
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, weekNumber, year]) // Ensure no duplicate records for the same week
}

model UserTask {
  id          Int     @id @default(autoincrement())
  userId      Int
  taskId      Int
  isCompleted Boolean @default(false)
  user        User    @relation(fields: [userId], references: [id])
  task        Task    @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId])
}
